A quick To-Do list (so people don't clash on what they work on)
===============================================================

Empty brackets next to filenames in source means that someone isn't working on
it. Plz use IRC or something to contact me (MistaRhee@freenode) 
(webchat.freenode.net to access) if you want more details etc.

Novel Details (MistaRhee):
    - Get something on the screen
    - Make it look pretty

settings - In general, there is no file for this yet (MistaRhee):
    - Change font size/zoom
    - Change the foreground/background colour


Mouse Integration(MistaRhee): (Doing this first because it makes EVERYTHING easier)
    - Currently EVERYTHING is controlled from keyboard. This involves scrolling
      around, selection. EVERYTHING. Mouse detection is a PITA (which is why it
      hasn't been implemented), however, if that can be impoemented, it would
      me AMAZING


Red Links ():
    - This is quite a trivial bit of work, but I just never got around to doing
      it. Basically check the chapters we add and ensure that they aren't "red
      links" (i.e. the page doesn't exist). This can be done by adding links to
      the novel detail query and then checking if the attribute exists is set
      then updating something in the data store (maybe a bool flag?)

Novel List ():
    - Finish implementing the scroll down method for it. The selection and all
      the other back-end stuff are done, just rendering left to do

    - Debug it, make sure it works properly
        * What it's supposed to do is display all the novels in a list and
        * scroll down as you are looking down it

Reader ():
    - Implement EVERYTHING
    - Nothing has been done on this 

*IMPORTANT* Remove novels after they've been removed from site():
    - If we don't implement this and the BT site people find out, we'll all get
      FUCKED in the ass.

    - There is an implied one which was "sort-of" implemented (it *should*
      work) however, I doubt it's reliable. MAKE THIS HAPPEN!

Improved WikiParser ():
    - Currently the wiki parser is hard coded to only work for the majority of
      novels (and so if there is a different format which goes outside the
      guidelines - I know, it shouldn't, but there are always exceptions - Then
      we need to handle those)

    - At the moment, all images are being downloaded. Let's say that again, all
      images are being downloaded. This means that if an image is used twice or
      three times, it would be downloaded twice/three times, which takes up a
      lot of space. We really don't want that, so maybe come up with some
      databasing system to deal with it.

    - Mebbe try to use a python/lua script to decode teh data grabbed from the
      website

Downloaded Section():
    - tl;dr have a section of the BT reader which will display all the
      chapters/volumes/novels that have been downloaded (present it nicely to
      the user) and maybe give them the option to clean out the cache(?)

Favourites Section():
    - Give the users option to "favourite" something. After that automatically
      check for updates on the "favourited" novel/chapter/volume and
      automatically download the updated version (daily or something)

MultiThreaded downloads():
    - This shouldn't be a very large revamp. 
    - Optimize/change the program so that everything runs on one thread, and
      when a user initiates a download, it starts a new thread.

Stored updates():
    - Have a file which writes all updates into and then have a tab which a
      user can pull out what novels/chapters etc. were updated

External Site():
    - This may be a little risky, because we might run into other copyright
      issues (BT people said they were fine with it, but others might be kinda
      mad that we dl the stuff) DO AT YOUR OWN RISK!!!
    - Download externally hosted novels as html files and then display on
      userland's favourite browser.


General Rules/Guidelines on committing to this repo
===================================================

Don't commit bugs. Ever. Like, on the pain of death, if you do, you'll be the
person in the name&shame file, until someone else commits a bug.

If you are changing a main file (i.e. btReader.cpp, which will be changed quite
a bit, please notify the other people about it before doing that. People will
be upset if you delete their changes. Like, very upset)

It is a good idea to keep a dropbox daemon continuously updating your files
too, just in case you delete everything before you have the chance to commit,
so you can regain lost data.

Git?!? How to??!?
=================

(A quick guide for some of the people I invited, because I know they are newbs)

Generally: 

    $ git pull origin master

to grab the changes from repos (ALWAYS do this before you start any work)
Create your own branch to do work on with:

    $ git checkout -b <YOUR BRANCH NAME HERE>

Then:
    
    $ git add -u 

to add all uncommitted changes on "tracked" files (i.e. files you want to send)

    $ git add *

to add all changes within a folder (you should do this in the home folder to
add all changes)

    $ git commit -m YOUR MESSAGE HERE (in quotes)

to commit your changes. Please leave an intelligent fucking message (not my
shitty ones)

Then push to your branch:

    $ git push origin <YOUR BRANCH NAME HERE>

Then finally when it's okay to merge shit:

    $ git checkout master //Switching to the master branch
    $ git merge <YOUR BRANCH NAME HERE>

If you don't need the branch anymore
    
    $ git branch -d <YOUR BRANCH NAME HERE>

Have a look at:

    $ git blame

so you can see the different people's contribution to a specific file (you can
also specify a specific time too)

To look at previous commits (for comments as well as version names):
    
    $ git log

Fore more info, go to:

   http://rogerdudler.github.io/git-guide/ 

This guy gives a pretty nice rundown on git
